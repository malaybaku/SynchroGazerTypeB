<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ActionTypeDoubleClick" xml:space="preserve">
    <value>Double Click</value>
  </data>
  <data name="ActionTypeHeader" xml:space="preserve">
    <value>Action Type</value>
  </data>
  <data name="ActionTypeSingleClick" xml:space="preserve">
    <value>Single Click</value>
  </data>
  <data name="CharacterHeader" xml:space="preserve">
    <value>Character</value>
  </data>
  <data name="CharacterPronamaChan" xml:space="preserve">
    <value>Pronama Chan</value>
  </data>
  <data name="CharacterQueryChan" xml:space="preserve">
    <value>Query Chan</value>
  </data>
  <data name="CharacterTohokuZunko" xml:space="preserve">
    <value>Tohoku Zunko</value>
  </data>
  <data name="CloseDialogCancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="CloseDialogDescription" xml:space="preserve">
    <value>By closing this window, all SynchroGazer application will shut down. Close anyway? If you click "No", this window is minimized.</value>
  </data>
  <data name="CloseDialogOK" xml:space="preserve">
    <value>Yes</value>
  </data>
  <data name="CloseDialogOnlyMinimize" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="CloseDialogTitle" xml:space="preserve">
    <value>SynchroGazer : Quit</value>
  </data>
  <data name="ContactTabHeader" xml:space="preserve">
    <value>CONTACT</value>
  </data>
  <data name="LanguageEnglish" xml:space="preserve">
    <value>English</value>
  </data>
  <data name="LanguageHeader" xml:space="preserve">
    <value>Language (Apply by restart)</value>
  </data>
  <data name="LanguageJapanese" xml:space="preserve">
    <value>Japanese</value>
  </data>
  <data name="LicenseSec1Headline" xml:space="preserve">
    <value>1. Usage</value>
  </data>
  <data name="LicenseSec1P1" xml:space="preserve">
    <value>Synchrogazer ("Software") is free (but partly closed-source) software for the non-profit use by the individual users.</value>
  </data>
  <data name="LicenseSec1P2" xml:space="preserve">
    <value>The creator does not restrict the usage of the Software, but users have to obey the licences referred in "2. About Third Party contents."</value>
  </data>
  <data name="LicenseSec2Headline" xml:space="preserve">
    <value>2. About Third Party Contents</value>
  </data>
  <data name="LicenseSec2P1" xml:space="preserve">
    <value>This software includes the third party contents, and their license are as follows.</value>
  </data>
  <data name="LicenseSec2PronamaChan" xml:space="preserve">
    <value>Pronama Chan</value>
  </data>
  <data name="LicenseSec2QueryChan" xml:space="preserve">
    <value>Query Chan</value>
  </data>
  <data name="LicenseSec2TobiiSDK" xml:space="preserve">
    <value>Tobii SDK (Interaction Use)</value>
  </data>
  <data name="LicenseSec2TohokuZunko" xml:space="preserve">
    <value>Tohoku Zunko</value>
  </data>
  <data name="LicenseSec3Headline" xml:space="preserve">
    <value>3. Restriction of the redistribution</value>
  </data>
  <data name="LicenseSec3P1" xml:space="preserve">
    <value>Basically user cannot redistribute the software.</value>
  </data>
  <data name="LicenseSec4Headline" xml:space="preserve">
    <value>4. Disclaimer</value>
  </data>
  <data name="LicenseSec4P1" xml:space="preserve">
    <value>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</value>
  </data>
  <data name="LicenseTabHeader" xml:space="preserve">
    <value>ABOUT</value>
  </data>
  <data name="SettingWindowTitle" xml:space="preserve">
    <value>SynchroGazer - Control Panel</value>
  </data>
  <data name="CharacterDisplaySizeRate" xml:space="preserve">
    <value>Size(%)</value>
  </data>
  <data name="CurrentStatusTabHeader" xml:space="preserve">
    <value>STATUS</value>
  </data>
  <data name="SettingsTabHeader" xml:space="preserve">
    <value>SETTINGS</value>
  </data>
  <data name="CharacterDisplay" xml:space="preserve">
    <value>Character Display Setting</value>
  </data>
  <data name="CharacterDisplayLocation" xml:space="preserve">
    <value>Location on screen</value>
  </data>
  <data name="StatusInfoHeader" xml:space="preserve">
    <value>Current Status</value>
  </data>
  <data name="StatusInfoPresence" xml:space="preserve">
    <value>Presence</value>
  </data>
  <data name="StatusInfoEyes" xml:space="preserve">
    <value>Eyes</value>
  </data>
  <data name="BlinkControlSettingDoubleClickInterval" xml:space="preserve">
    <value>Double Click Interval (ms)</value>
  </data>
  <data name="BlinkControlSettingHeader" xml:space="preserve">
    <value>Blink Control</value>
  </data>
  <data name="BlinkControlSettingOnlyWink" xml:space="preserve">
    <value>Allow Wink Only</value>
  </data>
  <data name="BlinkControlSettingReverseMode" xml:space="preserve">
    <value>Reverse Mode</value>
  </data>
  <data name="MarkDisplayShowAnimationFeedback" xml:space="preserve">
    <value>Show Animation Feedback</value>
  </data>
  <data name="MarkDisplayShowFixTarget" xml:space="preserve">
    <value>Show Fixed Target</value>
  </data>
  <data name="MarkDisplayShowLargeIconAlways" xml:space="preserve">
    <value>Show Large Circle Mark</value>
  </data>
  <data name="UdpClientExplanation" xml:space="preserve">
    <value>SynchroGazer consists of 2 softwares (WPF and Unity), so they have to communicate to achieve show some motion, or synchronize the setting. The setting here is to use the UDP communication between 2 programs. This 2 UDPs target to the loopback address.</value>
  </data>
  <data name="UdpClientExplanationHeader" xml:space="preserve">
    <value>Why UDP Setting?</value>
  </data>
  <data name="UdpClientSetting" xml:space="preserve">
    <value>Connection (Apply by restart)</value>
  </data>
  <data name="UdpClientSettingUnityToWpf" xml:space="preserve">
    <value>UDP Port2 (unity to wpf)</value>
  </data>
  <data name="UdpClientSettingWpfToUnity" xml:space="preserve">
    <value>UDP Port1 (wpf to unity)</value>
  </data>
  <data name="CharacterDisplayScreenNumber" xml:space="preserve">
    <value>Display Number</value>
  </data>
</root>